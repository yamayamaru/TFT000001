#include "pico/stdlib.h"
#include <stdio.h>
#include "TFT000001.h"

// 8bitパラレルやSPIの選択、ILI9486かILI9341かの選択は
// TFT000001_config.hで行います。
 

#ifndef TFT000001_PIO_8BIT_PARALELL
  #define TFT_MOSI 19
  #define TFT_SCK  18
  #define TFT_CS   17
  #define TFT_MISO 16
  #define TFT_SPI_PORT spi0

  #define TFT_RST  22
  #define TFT_DC   20
#endif



#ifdef TFT000001_PIO_8BIT_PARALELL
  #define TFT_DC   14
  #define TFT_RST  15
  #define TFT_WR   22

  #define TFT_D0    6
  #define TFT_D1    7
  #define TFT_D2    8
  #define TFT_D3    9
  #define TFT_D4   10
  #define TFT_D5   11
  #define TFT_D6   12
  #define TFT_D7   13
#endif



#ifdef TFT000001_PIO_8BIT_PARALELL
  #include "hardware/pio.h"
  #include "pio_8bit_parallel.pio.h"
  TFT000001 tft = TFT000001(TFT_D0, TFT_WR, TFT_DC, TFT_RST, -1);
#else
  #include "hardware/spi.h"
  TFT000001 tft = TFT000001(TFT_SPI_PORT, TFT_DC, TFT_RST, TFT_CS);
#endif


yama_2_GFX_H_beta_Canvas8 canvas01 = yama_2_GFX_H_beta_Canvas8(TFT000001_TFT_WIDTH, TFT000001_TFT_HEIGHT);

extern const uint8_t bitmap_mask01[];
extern const uint8_t bitmap01[];


void setup();
void loop();
int main() {
    stdio_init_all();

    setup();

    while (1) {
        loop();
    }

    return 0;
}

void setup(){


#ifdef TFT000001_PIO_8BIT_PARALELL
    tft.INIT_TFT_DATA_BUS();
#endif



#ifndef TFT000001_PIO_8BIT_PARALELL
    spi_init(TFT_SPI_PORT, 40000000);
    gpio_set_function(TFT_MISO, GPIO_FUNC_SPI);
    gpio_set_function(TFT_SCK, GPIO_FUNC_SPI);
    gpio_set_function(TFT_MOSI, GPIO_FUNC_SPI);
    gpio_pull_up(TFT_MISO);
    gpio_pull_up(TFT_SCK);
    gpio_pull_up(TFT_MOSI);
    spi_set_format(TFT_SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);   // SPI MODE0, MSBFIRST
#endif

    sleep_ms(100); 
    printf("\nReset:");


    tft.init(1);     // ILI9486の場合1なら18bitカラー、0なら16bitカラー
                     // ILI9486の場合でSPIの場合は18bitカラーのみ
                     // ILI9341は16bitカラーのみ

    // Web216カラーのパレットをロードする
    canvas01.setWeb216Palette256();
    tft.set_rotation(0);
    tft.fillRect(0, 0, tft.width(), tft.height(), tft.color(TFT000001_24BIT_COLOR_BLACK));
}



void setup01();
void random_raspberry(int rotation);
void loop() {
    static int r = 3;
    canvas01.setRotation(r);
    setup01();
    for (int i = 0; i < 200; i++) {
        random_raspberry(r);
    }
    r++;
    if (r >= 4) r = 0;
}

#define RASPBERRY_N   40
#define RDX        10
#define RDY        10

int rnd(int max);

int random_raspberry_width;
int random_raspberry_height;

struct {
    int    x;
    int    y;
    int    dx;
    int    dy;
    int    signx;
    int    signy;
    int    c;
} raspberry_data01[RASPBERRY_N];

void setup01(void) {

    random_raspberry_width = canvas01.width();
    random_raspberry_height = canvas01.height();

    for (int i = 0; i < RASPBERRY_N; i++) {
        raspberry_data01[i].x = rnd(random_raspberry_width);
        raspberry_data01[i].y = rnd(random_raspberry_height);
        raspberry_data01[i].dx = rnd(RDX) + 1;
        raspberry_data01[i].dy = rnd(RDY) + 1;
        raspberry_data01[i].signx = rnd(2) ? 1 : -1;
        raspberry_data01[i].signy = rnd(2) ? 1 : -1;
    }
}

void random_raspberry(int rotation) {

    int temp1, temp2;
    canvas01.fillScreen(TFT000001_WEB216_PALETTE_BLACK);
    for (int i = 0; i < RASPBERRY_N; i++ ) {
        temp1 = raspberry_data01[i].dx * raspberry_data01[i].signx;
        temp2 = raspberry_data01[i].x + temp1;
        if (temp2 > random_raspberry_width) {
            raspberry_data01[i].signx = -1;
            raspberry_data01[i].dx = rnd(RDX) + 1;
            raspberry_data01[i].x = random_raspberry_width + raspberry_data01[i].signx * raspberry_data01[i].dx;
        } else if (temp2 < 0 ) {
            raspberry_data01[i].signx = 1;
            raspberry_data01[i].dx = rnd(RDX) + 1;
            raspberry_data01[i].x = 0 + raspberry_data01[i].signx * raspberry_data01[i].dx;
        } else {
            raspberry_data01[i].x = raspberry_data01[i].x + temp1;
        } 
        temp1 = raspberry_data01[i].dy * raspberry_data01[i].signy;
        temp2 = raspberry_data01[i].y + temp1;
        if (temp2 > random_raspberry_height) {
            raspberry_data01[i].signy = -1;
            raspberry_data01[i].dy = rnd(RDY) + 1;
            raspberry_data01[i].y = random_raspberry_height + raspberry_data01[i].signy * raspberry_data01[i].dy;
        } else if (temp2 < 0 ) {
            raspberry_data01[i].signy = 1;
            raspberry_data01[i].dy = rnd(RDY) + 1;
            raspberry_data01[i].y = 0 + raspberry_data01[i].signy * raspberry_data01[i].dy;
        } else {
            raspberry_data01[i].y = raspberry_data01[i].y + temp1;
        }

        // canvas01にラズベリーのアイコンの描画
        canvas01.drawRGBBitmap8(raspberry_data01[i].x, raspberry_data01[i].y, bitmap01, bitmap_mask01, 32, 32);
    }
    // canvas01のフレームバッファの画像をLCDに表示する
    tft.drawPalette256Bitmap(0, 0, canvas01.getBuffer(), tft.width(), tft.height(), canvas01.getPaletteTable256(tft.getColorMode()));
    sleep_ms(10);
}

int rnd(int a) {
    return rand() % a;
}






//#########################ここから下は画像データ#####################


// 32x32 ラズベリーマスクデータ(1ピクセル1ビット MSBが先頭)
const uint8_t bitmap_mask01[] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0xfe,0x7f,0x80,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,
    0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,0x00,0xff,0xff,0x00,0x00,0x7f,0xfe,0x00,
    0x00,0x7f,0xfe,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,
    0x01,0xff,0xff,0x80,0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,0x03,0xff,0xff,0xc0,
    0x03,0xff,0xff,0xc0,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,0x01,0xff,0xff,0x80,
    0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x7f,0xfe,0x00,0x00,0x1f,0xf8,0x00,
    0x00,0x07,0xe0,0x00,0x00,0x03,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

// 32x32 ラズベリー8bitピクセル Web216カラー画像ーデータ
const uint8_t bitmap01[] = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x56,0x81,0xac,0x82,0x81,0x81,0x56,0x00,
    0x00,0x56,0x81,0x81,0x82,0xac,0x81,0x56,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xa6,0x7c,0x7c,0x75,0x7c,0x7c,0xd1,0x56,
    0x56,0xd1,0x7c,0x7c,0x75,0x7c,0x7c,0xa6,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x7c,0x76,0x7c,0x7c,0x75,0x76,0x7c,0xac,
    0xac,0x7c,0x76,0x75,0x7c,0x7c,0x76,0x7c,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xa6,0x75,0x75,0x7c,0x7c,0xa0,0x75,0xd1,
    0xd1,0x75,0x7c,0x7c,0x7c,0x75,0x75,0xa6,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0xac,0x7c,0x75,0x75,0x7c,0xa7,0xa6,0xd7,
    0xd7,0xa6,0xa7,0x7c,0x75,0x75,0x7c,0xac,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xd1,0x7c,0x75,0x75,0x7c,0xd7,0xd7,
    0xd7,0xd7,0x7c,0x75,0x75,0x7c,0xd1,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xac,0xa6,0xa6,0xd1,0xd7,0xb3,
    0xb3,0xd7,0xd1,0xa6,0xa6,0xac,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xb3,0x8e,0x8e,0xb3,0x6a,0x6a,
    0x6a,0x6a,0xb3,0x8e,0x8e,0xb3,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xb3,0x6a,0x6a,0x8e,0xb3,0x3f,0x3f,
    0x3f,0x3f,0x8e,0x8e,0x6a,0x6a,0xb3,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x6a,0x6a,0xb3,0xd7,0xd7,0xb3,0x8e,
    0x8e,0x8e,0xb3,0xd7,0xb3,0x6a,0x6a,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xac,0xb3,0xb3,0x8e,0x6a,0x6a,0x8e,0xd7,
    0xd7,0x8e,0x6a,0x6a,0x8e,0xb3,0xb3,0xac,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xb3,0xd7,0xb3,0x6a,0x3f,0x3f,0x6a,0xd7,
    0xd7,0x6a,0x3f,0x3f,0x6a,0xb3,0xd7,0xb3,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xb3,0x6a,0xb3,0x6a,0x3f,0x3f,0x3f,0x6a,0xb3,
    0xb3,0x6a,0x3f,0x3f,0x3f,0x6a,0xb3,0x6a,0xb3,0x56,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x6a,0x3f,0xb3,0x6a,0x3f,0x3f,0x3f,0x6a,0xd7,
    0xd7,0x6a,0x3f,0x3f,0x3f,0x6a,0xb3,0x3f,0x6a,0x81,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x6a,0x6a,0xb3,0xb3,0x6a,0x3f,0x6a,0x8e,0xd7,
    0xd7,0x8e,0x6a,0x3f,0x6a,0xb3,0xb3,0x6a,0x6a,0x81,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xb3,0x6a,0xd7,0xd7,0xb3,0x8e,0xb3,0x8e,0x6a,
    0x6a,0x8e,0xb3,0xb3,0xb3,0xd7,0xd7,0x6a,0xb3,0x56,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xac,0xb3,0x8e,0x8e,0xd7,0xd7,0x8e,0x3f,0x3f,
    0x3f,0x3f,0x8e,0xd7,0xd7,0x8e,0x8e,0xb3,0xac,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xb3,0x6a,0x3f,0x8e,0xd7,0x6a,0x3f,0x3f,
    0x3f,0x3f,0x6a,0xd7,0x6a,0x3f,0x6a,0xb3,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xb3,0x6a,0x3f,0x6a,0xb3,0x8e,0x3f,0x3f,
    0x3f,0x3f,0x8e,0xb3,0x6a,0x3f,0x6a,0xb3,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xac,0x8e,0x3f,0x3f,0x8e,0xd7,0x6a,0x6a,
    0x6a,0x6a,0xd7,0x8e,0x3f,0x3f,0x8e,0xac,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0xac,0x6a,0x6a,0x8e,0xd7,0xd7,0xb3,
    0xb3,0xd7,0xd7,0x8e,0x6a,0x6a,0xac,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x81,0xd7,0xd7,0xb3,0x6a,0x6a,
    0x6a,0x6a,0x8e,0xd7,0xd7,0x81,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0xac,0xb3,0x6a,0x3f,
    0x3f,0x6a,0xb3,0x81,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0x88,0x8e,
    0x88,0x88,0x56,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x2b,
    0x2b,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
